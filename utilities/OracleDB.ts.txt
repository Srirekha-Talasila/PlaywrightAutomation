import oracledb from 'oracledb';
import fs from 'fs';

// Define the configuration type for Oracle Database connection
interface OracleDBConfig {
  user: string;
  password: string;
  connectString: string;
}

export class OracleDatabaseUtility {
  private connection: oracledb.Connection | null = null;
  private config: OracleDBConfig;

  // Constructor that takes the OracleDBConfig as an argument
  constructor(config: OracleDBConfig) {
    this.config = config;
  }

  // Establish a database connection
  async connect(): Promise<void> {
    try {
      this.connection = await oracledb.getConnection(this.config);
      console.log('Connected to Oracle Database');
    } catch (error) {
      console.error('Error connecting to Oracle Database:', error);
      throw error;
    }
  }

  // Close the database connection
  async closeConnection(): Promise<void> {
    try {
      if (this.connection) {
        await this.connection.close();
        console.log('Oracle Database connection closed');
      }
    } catch (error) {
      console.error('Error closing Oracle Database connection:', error);
      throw error;
    }
  }

  // Execute an INSERT statement
  async insert(query: string, binds: any[] = []): Promise<void> {
    try {
      if (this.connection) {
        await this.connection.execute(query, binds, { autoCommit: true });
        console.log('Data inserted successfully');
      } else {
        console.error('No database connection available');
      }
    } catch (error) {
      console.error('Error inserting data:', error);
      throw error;
    }
  }

  // Execute an UPDATE statement
  async update(query: string, binds: any[] = []): Promise<void> {
    try {
      if (this.connection) {
        await this.connection.execute(query, binds, { autoCommit: true });
        console.log('Data updated successfully');
      } else {
        console.error('No database connection available');
      }
    } catch (error) {
      console.error('Error updating data:', error);
      throw error;
    }
  }

  // Execute a SELECT statement and return rows
  async read(query: string, binds: any[] = []): Promise<Record<string, any>[]> {
    try {
      if (this.connection) {
        const result = await this.connection.execute(query, binds);
        console.log('Data retrieved successfully');
        return result.rows as Record<string, any>[];  // Assert rows as array of records
      } else {
        console.error('No database connection available');
        return [];
      }
    } catch (error) {
      console.error('Error reading data:', error);
      throw error;
    }
  }

  // Execute a DELETE statement
  async delete(query: string, binds: any[] = []): Promise<void> {
    try {
      if (this.connection) {
        await this.connection.execute(query, binds, { autoCommit: true });
        console.log('Data deleted successfully');
      } else {
        console.error('No database connection available');
      }
    } catch (error) {
      console.error('Error deleting data:', error);
      throw error;
    }
  }

  // Execute multiple INSERT statements from a file containing SQL insert commands
  async insertFromFile(filePath: string): Promise<void> {
    const sqlStatements = fs.readFileSync(filePath, 'utf8').split(';');

    for (const statement of sqlStatements) {
      const trimmedStatement = statement.trim();
      if (trimmedStatement) {
        await this.insert(trimmedStatement);
      }
    }
    console.log('All data from file inserted successfully');
  }

  // Execute a SELECT statement without any bindings
  async readWithQuery(query: string): Promise<Record<string, any>[]> {
    return await this.read(query, []); // Call the existing read method with empty bindings
  }
}


-----------------

import sql, { ConnectionPool } from 'mssql';
import fs from 'fs';

// Define the configuration type for SQL Server connection
interface SQLServerDBConfig {
  user: string;
  password: string;
  server: string;
  database: string;
  port?: number; // Optional port
}

export class SQLServerDatabaseUtility {
  private pool: ConnectionPool | null = null;
  private config: SQLServerDBConfig;

  // Constructor that takes the SQLServerDBConfig as an argument
  constructor(config: SQLServerDBConfig) {
    this.config = config;
  }

  // Establish a database connection
  async connect(): Promise<void> {
    try {
      this.pool = await sql.connect(this.config);
      console.log('Connected to SQL Server Database');
    } catch (error) {
      console.error('Error connecting to SQL Server Database:', error);
      throw error;
    }
  }

  // Close the database connection
  async closeConnection(): Promise<void> {
    try {
      if (this.pool) {
        await this.pool.close();
        console.log('SQL Server Database connection closed');
      }
    } catch (error) {
      console.error('Error closing SQL Server Database connection:', error);
      throw error;
    }
  }

  // Execute an INSERT statement
  async insert(query: string, binds: any[] = []): Promise<void> {
    try {
      if (this.pool) {
        await this.pool.request()
          .query(query, binds);
        console.log('Data inserted successfully');
      } else {
        console.error('No database connection available');
      }
    } catch (error) {
      console.error('Error inserting data:', error);
      throw error;
    }
  }

  // Execute an UPDATE statement
  async update(query: string, binds: any[] = []): Promise<void> {
    try {
      if (this.pool) {
        await this.pool.request()
          .query(query, binds);
        console.log('Data updated successfully');
      } else {
        console.error('No database connection available');
      }
    } catch (error) {
      console.error('Error updating data:', error);
      throw error;
    }
  }

  // Execute a SELECT statement and return rows
  async read(query: string, binds: any[] = []): Promise<Record<string, any>[]> {
    try {
      if (this.pool) {
        const result = await this.pool.request().query(query, binds);
        console.log('Data retrieved successfully');
        return result.recordset as Record<string, any>[];  // Return the result set
      } else {
        console.error('No database connection available');
        return [];
      }
    } catch (error) {
      console.error('Error reading data:', error);
      throw error;
    }
  }

  // Execute a DELETE statement
  async delete(query: string, binds: any[] = []): Promise<void> {
    try {
      if (this.pool) {
        await this.pool.request()
          .query(query, binds);
        console.log('Data deleted successfully');
      } else {
        console.error('No database connection available');
      }
    } catch (error) {
      console.error('Error deleting data:', error);
      throw error;
    }
  }

  // Execute multiple INSERT statements from a file containing SQL insert commands
  async insertFromFile(filePath: string): Promise<void> {
    const sqlStatements = fs.readFileSync(filePath, 'utf8').split(';');

    for (const statement of sqlStatements) {
      const trimmedStatement = statement.trim();
      if (trimmedStatement) {
        await this.insert(trimmedStatement);
      }
    }
    console.log('All data from file inserted successfully');
  }

  // Execute a SELECT statement without any bindings
  async readWithQuery(query: string): Promise<Record<string, any>[]> {
    return await this.read(query, []); // Call the existing read method with empty bindings
  }
}


 // Method to execute an insert query with bindings
    async insert(query: string, params: Record<string, any>): Promise<void> {
        try {
            const request = this.pool.request();

            // Bind parameters dynamically
            for (const key in params) {
                request.input(key, this.getSqlType(params[key]), params[key]);
            }

            // Execute the insert query
            await request.query(query);
            console.log('Insert query executed successfully');
        } catch (error) {
            console.error('Insert failed:', error);
            throw error; // Rethrow the error for further handling
        }
    }

    private getSqlType(value: any): sql.ISqlType {
        // Determine the SQL type based on the value
        if (typeof value === 'string') {
            return sql.NVarChar;
        } else if (typeof value === 'number') {
            return Number.isInteger(value) ? sql.Int : sql.Decimal(10, 2);
        } else if (value instanceof Date) {
            return sql.DateTime;
        } else if (Buffer.isBuffer(value)) {
            return sql.VarBinary;
        } else {
            throw new Error(`Unsupported type for value: ${value}`);
        }
    }


    // Generic method to execute a SQL query with bindings
    async executeQuery(query: string, params: Record<string, any>): Promise<any> {
        try {
            const request = this.pool.request();

            // Bind parameters dynamically
            for (const key in params) {
                request.input(key, this.getSqlType(params[key]), params[key]);
            }

            // Execute the query
            const result = await request.query(query);
            console.log('Query executed successfully:', result);
            return result;
        } catch (error) {
            console.error('Query execution failed:', error);
            throw error; // Rethrow the error for further handling
        }
    }