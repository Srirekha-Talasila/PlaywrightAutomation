// Define the interface for the flattened JSON object
interface FlattenedJsonObject {
  [key: string]: 
    | string
    | string[]
    | number
    | number[]
    | boolean
    | null
    | FlattenedJsonObject      // For nested objects
    | FlattenedJsonObject[];   // For arrays of nested objects
}

// Method to flatten the JSON object
function flattenJson(
  obj: FlattenedJsonObject,       // Accepts an object of type FlattenedJsonObject
  parentKey: string = '',         // Key prefix for recursion
  result: Record<string, string> = {}  // Result will be a flat object with string values
): Record<string, string> {

  // Helper function to format keys by replacing underscores with spaces and capitalizing first letter
  const formatKey = (key: string): string => {
    return key
      .replace(/_/g, ' ')           // Replace underscores with spaces
      .replace(/^\w/, match => match.toUpperCase()); // Capitalize the first letter
  };

  // Loop through the keys of the object
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      const newKey = parentKey ? `${parentKey} ${key}` : key;  // Build new key with space separator

      const value = obj[key];  // Get the value at the current key

      // If the value is a nested object, recurse
      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
        flattenJson(value as FlattenedJsonObject, newKey, result);
      }
      // If the value is an array, handle each element recursively
      else if (Array.isArray(value)) {
        value.forEach((item, index) => {
          if (typeof item === 'object' && item !== null) {
            flattenJson(item as FlattenedJsonObject, `${newKey} ${index}`, result);  // Recursively flatten nested objects
          } else {
            result[`${newKey} ${index}`] = String(item);  // Convert primitive array elements to string
          }
        });
      }
      // Otherwise, handle primitive values (string, number, boolean, or null)
      else if (value !== null) {
        result[formatKey(newKey)] = String(value);  // Convert value to string and add to result
      }
    }
  }

  return result;
}

// Example Usage
const exampleJson: FlattenedJsonObject = {
  Repotob: {
    Version: 123,
    Type: 33,
    Subrules: [
      {
        Id: 1,
        Test1: "ww",
        Teste: null
      },
      {
        Id: "1q",
        Test1: "wwq",
        Teste: null
      }
    ]
  }
};

// Flatten the JSON object
const flattened = flattenJson(exampleJson);

// Log the flattened result
console.log('Flattened JSON:', flattened);



// Helper function to format a long timestamp to yyyy-mm-dd hh:mm:ss.sss
function formatTimestamp(timestamp: number): string {
  const date = new Date(timestamp);
  const formattedDate = [
    date.getFullYear(),
    String(date.getMonth() + 1).padStart(2, '0'),
    String(date.getDate()).padStart(2, '0')
  ].join('-') + ' ' + [
    String(date.getHours()).padStart(2, '0'),
    String(date.getMinutes()).padStart(2, '0'),
    String(date.getSeconds()).padStart(2, '0')
  ].join(':') + '.' + String(date.getMilliseconds()).padStart(3, '0'); // Include milliseconds
  
  return formattedDate;
}


 if (key === 'xyz' && typeof value === 'number') {
          result[formatKey(newKey)] = formatTimestamp(value); // Convert long timestamp to formatted date
        }