// Type definition for the flattened result where all values are strings
type FlattenedJsonType = 
  | string
  | number
  | boolean
  | null
  | FlattenedJsonType[]  // Array of any FlattenedJsonType (including nested arrays)
  | { [key: string]: FlattenedJsonType };  // Nested JSON objects

// Flatten JSON Function returning values as strings
function flattenJson(
  obj: FlattenedJsonType,           // Accepts JSON object with FlattenedJsonType
  parentKey: string = '',           // Key prefix for recursion
  result: Record<string, string> = {}  // The result will be a flat object with string values
): Record<string, string> {

  // Helper function to format the key (capitalize first word, replace underscores with spaces)
  const formatKey = (key: string): string => {
    return key
      .replace(/_/g, ' ') // Replace underscores with spaces
      .replace(/^\w/, match => match.toUpperCase()); // Capitalize first letter of the first word
  };

  // Check if the object is a primitive value (string, number, boolean, or null)
  if (typeof obj !== 'object' || obj === null) {
    if (obj !== null) {
      result[formatKey(parentKey)] = String(obj); // Convert value to string
    }
    return result;
  }

  // If the object is an array, handle each element recursively
  if (Array.isArray(obj)) {
    obj.forEach((item: FlattenedJsonType, index: number) => {
      flattenJson(item, `${parentKey} ${index}`, result); // Recurse for each array element
    });
  } else {
    // Iterate over the keys in the object
    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
        const newKey = parentKey ? `${parentKey}_${key}` : key;
        const value = obj[key];

        if (Array.isArray(value)) {
          // Handle arrays explicitly
          value.forEach((item: FlattenedJsonType, index: number) => {
            flattenJson(item, `${newKey} ${index}`, result); // Recurse for each array item
          });
        } else if (typeof value === 'object' && value !== null) {
          // Handle nested objects
          flattenJson(value, newKey, result);
        } else if (value !== null) {
          // Convert primitive values to strings
          result[formatKey(newKey)] = String(value);
        }
      }
    }
  }

  return result;
}

// Example usage
const complexJson: FlattenedJsonType = {
  Repotob: {
    Version: 123,
    Type: 33,
    Subrules: [
      {
        Id: 1,
        Test1: "ww",
        Teste: null
      },
      {
        Id: "1q",
        Test1: "wwq",
        Teste: null
      }
    ]
  }
};

// Flatten the JSON and log the result
const flattened = flattenJson(complexJson);
console.log('Flattened JSON:', flattened);
